import express from 'express';
import fetch from 'node-fetch'; // ou axios
import { setCache, getCache } from '../【 MODULES 】/libs.js'; // seu sistema de cache
const router = express.Router();

// Função auxiliar pra extrair videoId
function extractVideoId(input) {
  try {
    const url = new URL(input);

    if (url.hostname.includes("youtube.com")) return url.searchParams.get("v");
    if (url.hostname.includes("youtu.be")) return url.pathname.split("/")[1];

    return null;
  } catch {
    return null;
  }
}

// Função de busca (você já tem o searchYouTube)
async function searchYouTube(queryOrUrl) {
  const startTime = Date.now();
  let videoId = extractVideoId(queryOrUrl);

  try {
    if (!videoId) {
      // Busca via API interna do YouTube (youtubei)
      const searchEndpoint = `https://www.youtube.com/youtubei/v1/search?key=AIzaSyA-EXEMPLO`;
      const searchBody = {
        context: { client: { clientName: "WEB", clientVersion: "2.20251021.00.00" } },
        query: queryOrUrl
      };

      const searchResp = await fetch(searchEndpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(searchBody)
      });
      const searchData = await searchResp.json();

      const firstVideo = searchData.contents?.twoColumnSearchResultsRenderer?.primaryContents
        ?.sectionListRenderer?.contents?.[0]?.itemSectionRenderer?.contents
        ?.find(item => item.videoRenderer);

      if (!firstVideo) return null;
      videoId = firstVideo.videoRenderer.videoId;
    }

    // Detalhes do vídeo
    const playerEndpoint = `https://www.youtube.com/youtubei/v1/player?key=AIzaSyA-EXEMPLO`;
    const playerBody = {
      context: { client: { clientName: "WEB", clientVersion: "2.20251021.00.00" } },
      videoId
    };

    const playerResp = await fetch(playerEndpoint, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(playerBody)
    });
    const playerData = await playerResp.json();
    const vr = playerData.videoDetails;
    const micro = playerData.microformat?.playerMicroformatRenderer;

    return {
      title: vr.title,
      videoId: vr.videoId,
      url: `https://www.youtube.com/watch?v=${vr.videoId}`,
      description: vr.shortDescription,
      duration: vr.lengthSeconds + "s",
      views: vr.viewCount,
      channel: vr.author,
      thumbnails: vr.thumbnail?.thumbnails || [],
      published: micro?.uploadDate || "Não encontrado",
      searchTimeMs: Date.now() - startTime
    };

  } catch (err) {
    console.error("[YOUTUBE SCRAPER] Erro:", err.message);
    return null;
  }
}

// Endpoint GET /youtube?query= ou /youtube?url=
router.get('/', async (req, res) => {
  const { query, url } = req.query;
  if (!query && !url) return res.status(400).json({ error: 'Passe ?query= ou ?url=' });

  const cacheKey = query ? `yt:q:${query}` : `yt:u:${url}`;
  const cached = getCache(cacheKey);
  if (cached) return res.json(cached);

  try {
    const result = await searchYouTube(query || url);
    if (!result) return res.status(404).json({ error: 'Vídeo não encontrado' });

    setCache(cacheKey, result);
    res.json(result);
  } catch (err) {
    console.error("[YOUTUBE ENDPOINT] Erro:", err.message);
    res.status(500).json({ error: 'Erro interno' });
  }
});

export default router;
