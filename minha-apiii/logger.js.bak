// test-kurisu.mjs
import logger from './logger-kurisu.mjs';

// Delay para anima√ß√£o
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

console.clear();
console.log('üöÄ', 'Testando Kurisu Logger - Steins;Gate Style'.padEnd(50, ' '));
console.log('='.repeat(60));
await delay(500);

// TESTE 1: SUCCESS
logger.success('Servidor iniciado com sucesso na porta 3000');
await delay(800);

// TESTE 2: INFO
logger.info('Conectando ao banco de dados PostgreSQL...');
await delay(600);

// TESTE 3: WARNING
logger.warn('API de pagamento est√° depreciada - migre para v2');
await delay(800);

// TESTE 4: ERRO SIMPLES
logger.error('Falha na autentica√ß√£o do usu√°rio');
await delay(1000);

// TESTE 5: ERRO COMPLETO COM STACK TRACE
try {
  throw new Error('Timeout na conex√£o com Redis - m√°x 30s excedido');
} catch (error) {
  logger.error('Erro cr√≠tico no cache', error, { trace: true });
}
await delay(1200);

// TESTE 6: M√öLTIPLOS ERROS
for (let i = 1; i <= 3; i++) {
  logger.error(`Erro de valida√ß√£o #${i}`, new Error(`Campo obrigat√≥rio ausente`));
  await delay(400);
}

// TESTE 7: DEBUG (s√≥ aparece em development)
process.env.NODE_ENV = 'development';
logger.debug('Processando dados em background...');
logger.debug('Cache hit rate: 87.3%');

// TESTE 8: SUCESSO FINAL
logger.success('Sistema inicializado - El Psy Kongroo!');
console.log('\n‚ú®', 'Teste conclu√≠do!'.padEnd(50, ' '));