export const transformations = [
  {
    name: "Circled",
    map: c => c.replace(/[A-Za-z0-9]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ‚í∂ (U+24B6)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x24B6);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ‚ìê (U+24D0)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x24D0);
      } else if (/[0-9]/.test(ch)) {
        // 0 ‚Üí ‚ì™ (U+24EA), 1 ‚Üí ‚ë† (U+2460) ... 9 ‚Üí ‚ë® (U+2468)
        return ch === "0"
          ? String.fromCodePoint(0x24EA)
          : String.fromCodePoint(parseInt(ch) - 1 + 0x2460);
      }
      return ch;
    })
  },
  {
    name: "Fullwidth",
    map: c => c.replace(/[A-Za-z0-9]/g, ch =>
      String.fromCharCode(ch.charCodeAt(0) + 0xFF00 - 0x20)
    )
  },
  {
    name: "Math bold",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùêÄ (U+1D400)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D400);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùêö (U+1D41A)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D41A);
      }
      return ch;
    })
  },
  {
    name: "Math bold italic",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùë® (U+1D434)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D434);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùëé (U+1D44E)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D44E);
      }
      return ch;
    })
  },
  {
    name: "Small Caps",
    map: c => {
      const map = {
        a: "·¥Ä", b: " ô", c: "·¥Ñ", d: "·¥Ö", e: "·¥á", f: "Íú∞", g: "…¢", h: " ú",
        i: "…™", j: "·¥ä", k: "·¥ã", l: " ü", m: "·¥ç", n: "…¥", o: "·¥è", p: "·¥ò",
        q: "«´", r: " Ä", s: "Íú±", t: "·¥õ", u: "·¥ú", v: "·¥†", w: "·¥°", x: "x",
        y: " è", z: "·¥¢"
      };
      return c.toLowerCase().split('').map(ch => map[ch] || ch).join('');
    }
  },
  {
    name: "Math Fraktur",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùîÑ (U+1D504)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D504);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùîû (U+1D51E)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D51E);
      }
      return ch;
    })
  },
  {
    name: "Bold Fraktur",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùï¨ (U+1D56C)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D56C);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùñÜ (U+1D586)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D586);
      }
      return ch;
    })
  },
  {
    name: "Double Struck",
    map: c => c.replace(/[A-Za-z0-9]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùî∏ (U+1D538)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D538);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùïí (U+1D552)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D552);
      } else if (/[0-9]/.test(ch)) {
        // 0=48 ‚Üí ùüò (U+1D7D8)
        return String.fromCodePoint(ch.charCodeAt(0) - 48 + 0x1D7D8);
      }
      return ch;
    })
  },
  {
    name: "Math Script",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùíú (U+1D49C)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D49C);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùí∂ (U+1D4B6)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D4B6);
      }
      return ch;
    })
  },
  {
    name: "Bold Script",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùìê (U+1D4D0)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D4D0);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùì™ (U+1D4EA)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D4EA);
      }
      return ch;
    })
  },
  {
  name: "Monospace",
  map: c => c.replace(/[A-Za-z0-9]/g, ch => {
    if (/[A-Z]/.test(ch)) {
      return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D670);
    } else if (/[a-z]/.test(ch)) {
      return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D68A);
    } else if (/[0-9]/.test(ch)) {
      return String.fromCodePoint(ch.charCodeAt(0) - 48 + 0x1D7F6);
    }
    return ch;
  })
}, 
  {
    name: "Superscript",
    map: c => {
      const map = {
        a: "·µÉ", b: "·µá", c: "·∂ú", d: "·µà", e: "·µâ", f: "·∂†", g: "·µç", h: " ∞",
        i: "‚Å±", j: " ≤", k: "·µè", l: "À°", m: "·µê", n: "‚Åø", o: "·µí", p: "·µñ",
        q: "q", r: " ≥", s: "À¢", t: "·µó", u: "·µò", v: "·µõ", w: " ∑", x: "À£",
        y: " ∏", z: "·∂ª", A: "·¥¨", B: "·¥Æ", C: "·∂ú", D: "·¥∞", E: "·¥±", F: "·∂†",
        G: "·¥≥", H: "·¥¥", I: "·¥µ", J: "·¥∂", K: "·¥∑", L: "·¥∏", M: "·¥π", N: "·¥∫",
        O: "·¥º", P: "·¥æ", Q: "Q", R: "·¥ø", S: "S", T: "·µÄ", U: "·µÅ", V: "V",
        W: "·µÇ", X: "X", Y: "Y", Z: "·∂ª", 0: "‚Å∞", 1: "¬π", 2: "¬≤", 3: "¬≥",
        4: "‚Å¥", 5: "‚Åµ", 6: "‚Å∂", 7: "‚Å∑", 8: "‚Å∏", 9: "‚Åπ"
      };
      return c.split('').map(ch => map[ch] || ch).join('');
    }
  },
  {
    name: "Subscript",
    map: c => {
      const map = {
        a: "‚Çê", e: "‚Çë", h: "‚Çï", i: "·µ¢", j: "‚±º", k: "‚Çñ", l: "‚Çó", m: "‚Çò",
        n: "‚Çô", o: "‚Çí", p: "‚Çö", r: "·µ£", s: "‚Çõ", t: "‚Çú", u: "·µ§", v: "·µ•",
        x: "‚Çì", 0: "‚ÇÄ", 1: "‚ÇÅ", 2: "‚ÇÇ", 3: "‚ÇÉ", 4: "‚ÇÑ", 5: "‚ÇÖ", 6: "‚ÇÜ",
        7: "‚Çá", 8: "‚Çà", 9: "‚Çâ"
      };
      return c.split('').map(ch => map[ch] || ch).join('');
    }
  },
  {
    name: "Squared",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      const map = {
        A: "üÑ∞", B: "üÑ±", C: "üÑ≤", D: "üÑ≥", E: "üÑ¥", F: "üÑµ", G: "üÑ∂",
        H: "üÑ∑", I: "üÑ∏", J: "üÑπ", K: "üÑ∫", L: "üÑª", M: "üÑº", N: "üÑΩ",
        O: "üÑæ", P: "üÑø", Q: "üÖÄ", R: "üÖÅ", S: "üÖÇ", T: "üÖÉ", U: "üÖÑ",
        V: "üÖÖ", W: "üÖÜ", X: "üÖá", Y: "üÖà", Z: "üÖâ",
        a: "üÑ∞", b: "üÑ±", c: "üÑ≤", d: "üÑ≥", e: "üÑ¥", f: "üÑµ", g: "üÑ∂",
        h: "üÑ∑", i: "üÑ∏", j: "üÑπ", k: "üÑ∫", l: "üÑª", m: "üÑº", n: "üÑΩ",
        o: "üÑæ", p: "üÑø", q: "üÖÄ", r: "üÖÅ", s: "üÖÇ", t: "üÖÉ", u: "üÖÑ",
        v: "üÖÖ", w: "üÖÜ", x: "üÖá", y: "üÖà", z: "üÖâ"
      };
      return map[ch] || ch;
    })
  },
  {
    name: "Bubble Letters",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      const map = {
        A:"üÖê", B:"üÖë", C:"üÖí", D:"üÖì", E:"üÖî", F:"üÖï", G:"üÖñ", H:"üÖó",
        I:"üÖò", J:"üÖô", K:"üÖö", L:"üÖõ", M:"üÖú", N:"üÖù", O:"üÖû", P:"üÖü",
        Q:"üÖ†", R:"üÖ°", S:"üÖ¢", T:"üÖ£", U:"üÖ§", V:"üÖ•", W:"üÖ¶", X:"üÖß",
        Y:"üÖ®", Z:"üÖ©", a:"üÑ∞", b:"üÑ±", c:"üÑ≤", d:"üÑ≥", e:"üÑ¥", f:"üÑµ",
        g:"üÑ∂", h:"üÑ∑", i:"üÑ∏", j:"üÑπ", k:"üÑ∫", l:"üÑª", m:"üÑº", n:"üÑΩ",
        o:"üÑæ", p:"üÑø", q:"üÖÄ", r:"üÖÅ", s:"üÖÇ", t:"üÖÉ", u:"üÖÑ", v:"üÖÖ",
        w:"üÖÜ", x:"üÖá", y:"üÖà", z:"üÖâ"
      };
      return map[ch] || ch;
    })
  },
  {
    name: "Tiny Letters",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      const map = {
        a:"·µÉ", b:"·µá", c:"·∂ú", d:"·µà", e:"·µâ", f:"·∂†", g:"·µç", h:" ∞", i:"‚Å±",
        j:" ≤", k:"·µè", l:"À°", m:"·µê", n:"‚Åø", o:"·µí", p:"·µñ", q:"·ë´", r:" ≥",
        s:"À¢", t:"·µó", u:"·µò", v:"·µõ", w:" ∑", x:"À£", y:" ∏", z:"·∂ª"
      };
      return map[ch] || ch;
    })
  },
  {
    name: "Zalgo Text",
    map: c => c.split('').map(ch => {
      if (ch.match(/\s/)) return ch;
      const zalgo_up = ['Ãç','Ãé','ÃÑ','ÃÖ','Ãø','Ãë','ÃÜ','Ãê','Õí','Õó','Õë','Ãá','Ãà','Ãä','ÕÇ','ÕÉ','ÕÑ','Õä','Õã','Õå'];
      const zalgo_down = ['Ãñ','Ãó','Ãò','Ãô','Ãú','Ãù','Ãû','Ãü','Ã†','Ã§','Ã•','Ã¶','Ã©','Ã™','Ã´','Ã¨','Ã≠','ÃÆ','ÃØ','Ã∞'];
      const up = zalgo_up[Math.floor(Math.random()*zalgo_up.length)];
      const down = zalgo_down[Math.floor(Math.random()*zalgo_down.length)];
      return ch + up + down;
    }).join('')
  },
  {
    name: "Framed",
    map: c => c.replace(/[A-Za-z0-9]/g, ch => {
      const map = {
        A:"üÑ∞", B:"üÑ±", C:"üÑ≤", D:"üÑ≥", E:"üÑ¥", F:"üÑµ", G:"üÑ∂", H:"üÑ∑",
        I:"üÑ∏", J:"üÑπ", K:"üÑ∫", L:"üÑª", M:"üÑº", N:"üÑΩ", O:"üÑæ", P:"üÑø",
        Q:"üÖÄ", R:"üÖÅ", S:"üÖÇ", T:"üÖÉ", U:"üÖÑ", V:"üÖÖ", W:"üÖÜ", X:"üÖá",
        Y:"üÖà", Z:"üÖâ",
        a:"üÑ∞", b:"üÑ±", c:"üÑ≤", d:"üÑ≥", e:"üÑ¥", f:"üÑµ", g:"üÑ∂", h:"üÑ∑",
        i:"üÑ∏", j:"üÑπ", k:"üÑ∫", l:"üÑª", m:"üÑº", n:"üÑΩ", o:"üÑæ", p:"üÑø",
        q:"üÖÄ", r:"üÖÅ", s:"üÖÇ", t:"üÖÉ", u:"üÖÑ", v:"üÖÖ", w:"üÖÜ", x:"üÖá",
        y:"üÖà", z:"üÖâ",
        0:"‚ìø",1:"‚ë†",2:"‚ë°",3:"‚ë¢",4:"‚ë£",5:"‚ë§",6:"‚ë•",7:"‚ë¶",8:"‚ëß",9:"‚ë®"
      };
      return map[ch] || ch;
    })
  },
  {
    name: "Parenthesized",
    map: c => c.replace(/[A-Za-z0-9]/g, ch => {
      const map = {
        A:"‚í∂", B:"‚í∑", C:"‚í∏", D:"‚íπ", E:"‚í∫", F:"‚íª", G:"‚íº", H:"‚íΩ", I:"‚íæ",
        J:"‚íø", K:"‚ìÄ", L:"‚ìÅ", M:"‚ìÇ", N:"‚ìÉ", O:"‚ìÑ", P:"‚ìÖ", Q:"‚ìÜ", R:"‚ìá",
        S:"‚ìà", T:"‚ìâ", U:"‚ìä", V:"‚ìã", W:"‚ìå", X:"‚ìç", Y:"‚ìé", Z:"‚ìè",
        a:"‚ìê", b:"‚ìë", c:"‚ìí", d:"‚ìì", e:"‚ìî", f:"‚ìï", g:"‚ìñ", h:"‚ìó", i:"‚ìò",
        j:"‚ìô", k:"‚ìö", l:"‚ìõ", m:"‚ìú", n:"‚ìù", o:"‚ìû", p:"‚ìü", q:"‚ì†", r:"‚ì°",
        s:"‚ì¢", t:"‚ì£", u:"‚ì§", v:"‚ì•", w:"‚ì¶", x:"‚ìß", y:"‚ì®", z:"‚ì©",
        0:"‚ì™",1:"‚ë†",2:"‚ë°",3:"‚ë¢",4:"‚ë£",5:"‚ë§",6:"‚ë•",7:"‚ë¶",8:"‚ëß",9:"‚ë®"
      };
      return map[ch] || ch;
    })
  }, 
  {
    name: "Upside Down",
    map: c => {
      const map = {
        a:"…ê", b:"q", c:"…î", d:"p", e:"«ù", f:"…ü", g:"∆É", h:"…•",
        i:"ƒ±", j:"…æ", k:" û", l:" É", m:"…Ø", n:"u", o:"o", p:"d",
        q:"b", r:"…π", s:"s", t:" á", u:"n", v:" å", w:" ç", x:"x",
        y:" é", z:"z", A:"‚àÄ", B:"êêí", C:"∆Ü", D:"·ó°", E:"∆é", F:"‚Ñ≤",
        G:"◊§", H:"H", I:"I", J:"≈ø", K:" û", L:"À•", M:"W", N:"N",
        O:"O", P:"‘Ä", Q:"Œå", R:"…π", S:"S", T:"‚ä•", U:"‚à©", V:"Œõ",
        W:"M", X:"X", Y:"‚ÖÑ", Z:"Z", 0:"0", 1:"∆ñ", 2:"·ÑÖ", 3:"∆ê",
        4:"„Ñ£", 5:"œõ", 6:"9", 7:"„Ñ•", 8:"8", 9:"6"
      };
      return c.split('').map(ch => map[ch] || ch).reverse().join('');
    }
  },
  {
    name: "Strike Through",
    map: c => c.split('').map(ch => ch + 'Ã∂').join('')
  },
  {
    name: "Wavy",
    map: c => c.split('').map((ch,i) => i%2===0 ? ch.toUpperCase() : ch.toLowerCase()).join('')
  },
  {
    name: "Cursive Bold",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) return String.fromCodePoint(ch.charCodeAt(0)-65+0x1D4D0);
      if (/[a-z]/.test(ch)) return String.fromCodePoint(ch.charCodeAt(0)-97+0x1D4EA);
      return ch;
    })
  }, 
  {
    name: "Reverse Text",
    map: c => c.split('').reverse().join('')
  },
  {
    name: "Spaced Letters",
    map: c => c.split('').join(' ')
  },
  {
    name: "Underlined",
    map: c => c.split('').map(ch => ch + 'Ã≤').join('')
  },
  {
    name: "Double Underlined",
    map: c => c.split('').map(ch => ch + 'Ã≥').join('')
  },
  {
    name: "Overlined",
    map: c => c.split('').map(ch => ch + 'ÃÖ').join('')
  },
  {
    name: "Dotted Letters",
    map: c => c.split('').map(ch => ch + 'Ãá').join('')
  },
  {
    name: "Random Case",
    map: c => c.split('').map(ch => Math.random() > 0.5 ? ch.toUpperCase() : ch.toLowerCase()).join('')
  },
  {
    name: "Alternate Case",
    map: c => c.split('').map((ch, i) => i % 2 === 0 ? ch.toLowerCase() : ch.toUpperCase()).join('')
  },
  {
    name: "Boxed Letters",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      const map = {
        A: "üÖ∞", B: "üÖ±", C: "üÖ≤", D: "üÖ≥", E: "üÖ¥", F: "üÖµ", G: "üÖ∂",
        H: "üÖ∑", I: "üÖ∏", J: "üÖπ", K: "üÖ∫", L: "üÖª", M: "üÖº", N: "üÖΩ",
        O: "üÖæ", P: "üÖø", Q: "üÜÄ", R: "üÜÅ", S: "üÜÇ", T: "üÜÉ", U: "üÜÑ",
        V: "üÜÖ", W: "üÜÜ", X: "üÜá", Y: "üÜà", Z: "üÜâ",
        a: "üÖ∞", b: "üÖ±", c: "üÖ≤", d: "üÖ≥", e: "üÖ¥", f: "üÖµ", g: "üÖ∂",
        h: "üÖ∑", i: "üÖ∏", j: "üÖπ", k: "üÖ∫", l: "üÖª", m: "üÖº", n: "üÖΩ",
        o: "üÖæ", p: "üÖø", q: "üÜÄ", r: "üÜÅ", s: "üÜÇ", t: "üÜÉ", u: "üÜÑ",
        v: "üÜÖ", w: "üÜÜ", x: "üÜá", y: "üÜà", z: "üÜâ"
      };
      return map[ch] || ch;
    })
  },
  {
    name: "Math Sans Serif",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùóî (U+1D5A0)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D5A0);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùóÆ (U+1D5BA)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D5BA);
      }
      return ch;
    })
  },
  {
    name: "Math Sans Serif Italic",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      if (/[A-Z]/.test(ch)) {
        // A=65 ‚Üí ùòà (U+1D5D4)
        return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1D5D4);
      } else if (/[a-z]/.test(ch)) {
        // a=97 ‚Üí ùò¢ (U+1D5EE)
        return String.fromCodePoint(ch.charCodeAt(0) - 97 + 0x1D5EE);
      }
      return ch;
    })
  },
  {
    name: "Greek Bold",
    map: c => c.replace(/[A-Za-z]/g, ch => {
      const map = {
        A: "ùö®", B: "ùö©", C: "ùöæ", D: "ùö´", E: "ùö¨", F: "ùö≠", G: "ùöÆ",
        H: "ùöØ", I: "ùö∞", J: "ùö±", K: "ùö≤", L: "ùö≥", M: "ùö¥", N: "ùöµ",
        O: "ùö∂", P: "ùö∑", Q: "ùö∏", R: "ùöπ", S: "ùö∫", T: "ùöª", U: "ùöº",
        V: "ùöΩ", W: "ùöæ", X: "ùöø", Y: "ùöº", Z: "ùö≠",
        a: "ùõÇ", b: "ùõÉ", c: "ùõÑ", d: "ùõÖ", e: "ùõÜ", f: "ùõá", g: "ùõà",
        h: "ùõâ", i: "ùõä", j: "ùõã", k: "ùõå", l: "ùõç", m: "ùõé", n: "ùõè",
        o: "ùõê", p: "ùõë", q: "ùõí", r: "ùõì", s: "ùõî", t: "ùõï", u: "ùõñ",
        v: "ùõó", w: "ùõò", x: "ùõô", y: "ùõö", z: "ùõõ"
      };
      return map[ch] || ch;
    })
  },
  {
    name: "Mirror Text",
    map: c => {
      const map = {
        a: "…í", b: "d", c: "…î", d: "b", e: "…ò", f: "·é∏", g: "«´",
        h: " ú", i: "i", j: "ÍûÅ", k: " û", l: "l", m: "…Ø", n: "u",
        o: "o", p: "q", q: "p", r: "…π", s: "ÍôÖ", t: " á", u: "n",
        v: " å", w: " ç", x: "x", y: " è", z: "z", A: "‚àÄ", B: "·ô†",
        C: "∆Ü", D: "·ó°", E: "∆é", F: "Íüª", G: "‚ÖÅ", H: "H", I: "I",
        J: "·íç", K: "‚ãä", L: "‚ÖÇ", M: "W", N: "–ò", O: "O", P: "Íüº",
        Q: "Œå", R: "–Ø", S: "ÍôÑ", T: "‚ä•", U: "‚à©", V: "Œõ", W: "M",
        X: "X", Y: "‚ÖÑ", Z: "Z"
      };
      return c.split('').map(ch => map[ch] || ch).join('');
    }
  }, 
  {
    name: "Vaporwave",
    map: c => c.replace(/[A-Za-z0-9]/g, ch =>
      String.fromCharCode(ch.charCodeAt(0) + 0xFEE0 - 0x20)
    )
  },
  {
  name: "Negative Circled",
  map: c => c.replace(/[A-Z0-9]/g, ch => {
    if (/[A-Z]/.test(ch)) {
      return String.fromCodePoint(ch.charCodeAt(0) - 65 + 0x1F170); // üÖ∞
    } else if (/[0-9]/.test(ch)) {
      // 0 = ‚ìø (U+24FF), 1-9 = ‚ù∂‚Äì‚ùæ (U+2776‚ÄìU+277E)
      return ch === "0"
        ? String.fromCodePoint(0x24FF)
        : String.fromCodePoint(parseInt(ch) - 1 + 0x2776);
    }
    return ch;
  })
}
];
