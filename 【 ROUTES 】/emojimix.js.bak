import express from 'express';
import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { EMOJI_DIR, getEmojiFilename, getEmojiFilePath, } from '../config.js';
const router = express.Router();

// Função para baixar ou pegar do cache
async function getEmojiMashup(e1, e2, size = 128) {
  if (!fs.existsSync(EMOJI_DIR)) fs.mkdirSync(EMOJI_DIR, { recursive: true });
  const filename = getEmojiFilename(e1, e2);
  const filepath = getEmojiFilePath(filename);

  if (fs.existsSync(filepath)) {
    return { local: true, path: filepath };
  }

  const url = `https://emojik.vercel.app/s/${e1}_${e2}?size=${size}`;
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error('Não foi possível baixar a imagem');
    const buffer = Buffer.from(await res.arrayBuffer());
    fs.writeFileSync(filepath, buffer);
    return { local: true, path: filepath };
  } catch (err) {
    console.error('Erro ao baixar mashup:', err.message);
    return { local: false, url };
  }
}

// Endpoint: /emojimix?e1=1f600&e2=1f602&size=128
router.get('/', async (req, res, next) => {
  const { e1, e2, size = 128 } = req.query;
  if (!e1 || !e2) return res.status(400).json({ error: 'Passe ?e1=CODEPOINT&e2=CODEPOINT' });

  try {
    const mashup = await getEmojiMashup(e1, e2, size);
    if (mashup.local) {
      res.sendFile(mashup.path);
    } else {
      // fallback direto do Emoji Kitchen
      res.redirect(mashup.url);
    }
  } catch (err) {
    next(err);
  }
});

export default router;