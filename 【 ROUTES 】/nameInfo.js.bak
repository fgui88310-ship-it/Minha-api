// api/endpoints/name.js
import express from 'express';
import axios from 'axios';
import * as cheerio from 'cheerio';

const router = express.Router();

router.get('/', async (req, res) => {
  const { name } = req.query;
  if (!name) return res.status(400).json({ error: 'Nome?' });

  try {
    const { data } = await axios.get(`https://www.behindthename.com/name/${name.toLowerCase()}`);
    const $ = cheerio.load(data);

    const genero = $('.infoname-info .masc').text().trim() || 'Neutro';
    const uso = $('.infoname-info .usg').text().trim() || 'Desconhecido';
    const pronuncia = $('#infoname-info-pron').text().split('[')[0].trim() || 'N/A';
    const significado = $('.namedef').text().split('[')[0].trim() || 'Sem significado';

    const svg = `
<svg width="1200" height="500" xmlns="http://www.w3.org/2000/svg" font-family="Arial">
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#0f0c29"/>
      <stop offset="50%" stop-color="#302b63"/>
      <stop offset="100%" stop-color="#24243e"/>
    </linearGradient>
    <linearGradient id="badge" x1="0%" y1="0%" x2="100%" y2="0%">
      <stop offset="0%" stop-color="#ff4d6d"/>
      <stop offset="100%" stop-color="#feca57"/>
    </linearGradient>
  </defs>
  <rect width="100%" height="100%" fill="url(#bg)" rx="18"/>
  <rect x="40" y="40" width="280" height="40" fill="url(#badge)" rx="20"/>
  <text x="60" y="65" fill="#1d1b31" font-size="18" font-weight="bold">Informações do Nome</text>
  <text x="40" y="140" fill="white" font-size="80" font-weight="bold">${name.toUpperCase()}</text>
  <text x="40" y="200" fill="white" font-size="32">Gênero: ${genero}</text>
  <text x="40" y="250" fill="white" font-size="32">Uso: ${uso}</text>
  <text x="40" y="300" fill="white" font-size="32">Pronúncia: ${pronuncia}</text>
  <text x="40" y="380" fill="white" font-size="30">${significado.slice(0, 80)}...</text>
</svg>`;

    const base64 = Buffer.from(svg).toString('base64');
    res.json({ img: `data:image/svg+xml;base64,${base64}` });

  } catch (err) {
    res.status(500).json({ error: 'Erro no scraping' });
  }
});

export default router;